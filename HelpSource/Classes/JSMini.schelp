TITLE:: JSMini
summary:: Convert a mini-notation string to steps
categories:: mini-notation
related:: Classes/Pmini

DESCRIPTION::
With JSMini you can convert a mini-notation string to steps by calling the "cycle()" or "step()" method.

Cycle() will return the next cycle to play, which consists of one or more steps.

Step() will return the next step to play, which is an array with 5 values:

code::
\trig : 1 should trigger a note, 0 should not (a rest)
\delta: how long to wait before processing the next step
\dur  : value to calculate the sustain for a step
\str  : string value for a step
\num  : integer value for a step
::

You can use the 5 values any way you want.

CLASSMETHODS::

METHOD:: new
Create a new JSMini object

ARGUMENT:: mini_notation
The mini-notation string to parse

returns:: the JSMini object

INSTANCEMETHODS::

METHOD:: step
Get the next step to play, according to the mini-notation string

returns:: Array object with values \trig, \delta, \dur, \str, \num

METHOD:: cycle
Get the next cycle to play, according to the mini-notation string

returns:: Array object with one or more steps (sub-arrays) in it

METHOD:: log_nodes
Log the internal node-tree to the post window, for debugging

returns::

METHOD:: log_tokens
Log the parsed tokens to the post window, for debugging

returns::

METHOD:: log
Logs the given number of cycles to the post window, for debugging

ARGUMENT:: cycles
An integer.

returns::

EXAMPLES::

code::
(
Routine({
	var parser = JSMini("[1 [2 2] 3 4]/4");
	
	loop {
		var synth, freq;
		var trig, delta, dur, str, num;

		# trig, delta, dur, str, num = parser.step();

		freq = (str.asInteger + 60).midicps;
		
		s.bind { synth = Synth(\default, [freq: freq]) };

		delta.wait;

		s.bind { synth.set(\gate, 0) };
	}
}).play
)
::
